// Timeout 
timeout(time: 300, unit: 'MINUTES') {
node('orange') {
try {
    cleanWs()
    
    echo "Env: ${env.JOB_NAME}"
    slackSend (color: 'good', message: "START: Job '${env.JOB_NAME} #${env.BUILD_NUMBER}' (${env.BUILD_URL})")  
    
    docker.image('clarity99/buildtools:build-sv-bionic-ccache').inside {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Configure') {
            if (env.JOB_NAME =~ '_release') {
                sh './autogen.sh'
                sh './configure'
            } 
            else if (env.JOB_NAME =~ '_debug') {
                sh './autogen.sh'
                sh './configure --enable-debug'
            } 
            else if (env.JOB_NAME =~ '_no-wallet') {
                sh './autogen.sh'
                sh './configure --disable-wallet'
            } 
            else if (env.JOB_NAME =~ '_tsan') {
                sh './autogen.sh'
                sh './configure --enable-tsan'
            } 
            else if (env.JOB_NAME =~ '_ubsan-asan') {
                sh './autogen.sh'
                sh './configure --enable-ubsan --enable-asan'
            }     
            else if (env.JOB_NAME =~ '_test') {
                sh './autogen.sh'
                sh './configure'
            } 
            else if (env.JOB_NAME =~ '_extended') {
                properties([pipelineTriggers([cron('0 1 * * *')]),])
                sh './autogen.sh '
                sh './configure --enable-debug'
            } 
            else {
                echo "Default job"
                sh './autogen.sh'
                sh './configure'
            }
        }
        
        stage('Build') {
            echo 'Building....'
            sh 'make clean'
            sh 'make -j$(nproc --all)'
        }

        stage('Unit Tests') {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh 'mkdir -p build/reports'
                sh 'cd src/test && ./test_bitcoin --log_format=JUNIT --log_sink=../../build/reports/unittests.xml --run_test=\'!script_tests\''
            }
        }
        
        stage('secp256k1 Tests') {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh 'cd src/secp256k1 && make -j$(nproc --all)'
                sh 'src/secp256k1/exhaustive_tests'
                sh 'src/secp256k1/tests'
            }
        }
        
        stage('univalue Tests') {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh 'cd src/univalue && make -j$(nproc --all)'
                sh 'cd src/univalue && test/object'
                sh 'cd src/univalue && test/no_nul'
                sh 'cd src/univalue && test/unitester'
            }
        }
        
        stage('leveldb Tests') {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh 'cd src/leveldb && make -j1 check'
            }
        }
        
        stage('Util Tests') {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh 'test/util/bitcoin-util-test.py --verbose > build/reports/util-test.log'
            }
        }
        
        stage('Functional Tests') {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            
                def exclude_all = "bsv-mempool_ancestorsizelimit,bsv-ptv-txn-chains,bsv-pvq-timeouts,bsv-pbv-withsigops,bsv-genesis-general,abc-p2p-compactblocks,bsv-txnvalidator_p2p_txns,bsv-getblock-rest-rpc,mining_journal,pruning,dbcrash,rawtransactions,bsv-genesis-journal-reorg,bsv-p2p_inv_msg_time_order2,bsv-coinbase_P2SH,bsv-protoconf,p2p-compactblocks,bsv-genesis-mempool-scriptcache,example-test,bsv-genesis-activation-transactions-beforeafter,bsv-sigopslimit-consensus-test,csv-activation,bsv-p2sh,listsinceblock,bsv-genesis-activation-gracefull-period,wallet-encryption,prioritise_transaction,txn_clone,assumevalid,bsv-protoconf-versions-compatibility,bsv-128Mb-blocks,bsv-2Mb-excessiveblock,disconnect_ban"
                def exclude_extended = "${exclude_all},bsv-block-stalling-test,bsv-genesis-large-blockfile-io,bsv-genesis-large-blockfile-max-32-bit,bsv-genesis-large-blockfile-reindex,bsv-large-blocks-txindex-data,assumevalid"
                def exclude_ubsan_asan = "${exclude_all},bsv-block-size-activation-generated-default,prioritise_transaction,blockchain,bsv-accept_max_sized_orphan,bipdersig-p2p,bip65-cltv-p2p"
                        
                if (env.JOB_NAME =~ '_extended_large_blocks') {
                    echo "Running test runner for extended and large blocks"
                    sh "test/functional/test_runner.py --jobs 4 --junitouput=build/reports/func-tests.xml --tmpdirprefix=tmp_ft --extended --large-block-tests --exclude ${exclude_extended}"
                }
                else if (env.JOB_NAME =~ '_tsan') {
                    echo "Thread sanitizer functional tests are temporary disabled because they fail."
                }
                else if (env.JOB_NAME =~ '_ubsan-asan') {
                    echo "Running test runner for ubsan-asan sanitizer"
                    sh "test/functional/test_runner.py -j\$(nproc --all) --junitouput=build/reports/func-tests.xml --tmpdirprefix=tmp_ft --exclude ${exclude_ubsan_asan}"
                }
                else if (env.JOB_NAME =~ '_no-wallet') {
                    echo "Functional tests for no-wallet build are invalid, skipping." 
                }
                else {
                    echo "Running test runner with default settings"
                    sh "test/functional/test_runner.py -j\$(nproc --all) --junitouput=build/reports/func-tests.xml --tmpdirprefix=tmp_ft --exclude ${exclude_all}"
                }
            }
            
            echo "Functional tests done"
        }
        
        stage('Benchmark') {
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh 'src/bench/bench_bitcoin'
            }
        }

        echo "Build result is: $currentBuild.result"
        
        // Copy bineries
        try {
            sh 'mkdir bin'
            sh 'cp src/bitcoind bin/'
            sh 'cp src/bitcoin-cli bin/'
            sh 'cp src/bitcoin-miner bin/'
            sh 'cp src/bitcoin-tx bin/'
        }
        catch (all) {
            echo "Failed to copy binaries"
        }
        
        
        echo "Junit-ing results"
        try {
            junit testResults: 'build/reports/*.xml'
        } 
        catch (all) {
            echo "Failed to junit results"
        }
        
        if(currentBuild.result == 'SUCCESS') {
            echo "Success! Sending to slack"
            slackSend (color: 'good', message: "SUCCESS: Job '${env.JOB_NAME} #${env.BUILD_NUMBER}' (${env.BUILD_URL})")
            
        } else if (currentBuild.result == 'FAILURE') {
            echo "Build result FAILURE!"
            bitbucketStatusNotify(buildState: 'FAILED')

            // Send email
             script: emailext (
               to: '$DEFAULT_RECIPIENTS',
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output (account needed) at &QUOT; \
                  <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'CulpritsRecipientProvider'],
                                     [$class: 'DevelopersRecipientProvider'],
                                     [$class: 'RequesterRecipientProvider'], 
                                     [$class: 'FailingTestSuspectsRecipientProvider'],
                                     [$class: 'FirstFailingBuildSuspectsRecipientProvider'],
                                     [$class: 'UpstreamComitterRecipientProvider']]
            )
            
        }

        try {
            // Save artifacts
            echo "Trying to save artifacts"
            archiveArtifacts artifacts: 'bin/**'
            archiveArtifacts artifacts: 'build/reports/**'
            archiveArtifacts artifacts: 'tmp_ft/bitcoin*/**/**', excludes: """tmp_ft/bitcoin*/**/node*/regtest/blocks/**"""
        } 
        catch(all) {
            echo "Failed saving log artifacts!"
        }
    } // End docker
}
catch (all) {
    echo "Node failed, trying to save artifacts"
    archiveArtifacts artifacts: 'bin/**'
    archiveArtifacts artifacts: 'build/reports/**'
    archiveArtifacts artifacts: 'tmp_ft/bitcoin*/**/**', excludes: """tmp_ft/bitcoin*/**/node*/regtest/blocks/**"""
}
}
}
